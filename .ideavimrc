" To enable Key repeating in IntelliJ CE
" run following command from the terminal
" defaults write com.jetbrains.intellij.ce ApplePressAndHoldEnabled -bool false


""" Configuration
let mapleader=" "
set relativenumber
set clipboard+=unnamed
set incsearch

""" Plugins
set which-key
set highlightedyank
set matchit
set surround
set commentary
set argtextobj
set easymotion

""" Plugin settings
let g:argtextobj_pairs="[:],(:),<:>"

set notimeout
set timeoutlen=5000

""" Mappings

" easymotion

nmap s <Plug>(easymotion-s)
nmap f <Plug>(easymotion-f)
nmap t <Plug>(easymotion-t)

" Better escape
inoremap jk <esc>
inoremap jj <esc>

" Save
inoremap <C-S> <esc>:w<cr>
nnoremap <C-S> :w<cr>

" Code
let g:WhichKeyDesc_code = "<Space>c Code+"

nmap <leader>ca <Action>(ShowIntentionActions)
let g:WhichKeyDesc_code_action = "<Space>ca code actions"

nmap <leader>cs <Action>(FileStructurePopup)
let g:WhichKeyDesc_code_structure = "<Space>cs code structure"

nmap <leader>cf <Action>(ReformatCode)
let g:WhichKeyDesc_code_format = "<Space>cf code format"

nmap <leader>cS <Action>(ActivateStructureToolWindow)
let g:WhichKeyDesc_code_structureSidebar = "<Space>cS code structure sidebar"

nmap <leader>cr <Action>(RenameElement)
let g:WhichKeyDesc_code_rename = "<Space>cr rename symbol"

nmap <leader>cd <Action>(ShowErrorDescription)
let g:WhichKeyDesc_code_diagnosticsAtLine = "<Space>cd show diagnostics"

nmap <leader>cS <Action>(ActivateStructureToolWindow)

nmap <leader>co <Action>(OrganizeImports)

" Refactor

nmap <leader>rr <Action>(RenameElement)
nmap <leader>rs <Action>(ChangeSignature)

" Refactor - Extract
nmap <leader>rxv <Action>(IntroduceVariable)
vmap <leader>rxv <Action>(IntroduceVariable)
nmap <leader>rxm <Action>(ExtractFunction)
vmap <leader>rxm <Action>(ExtractFunction)
nmap <leader>rxp <Action>(IntroduceParameter)
vmap <leader>rxp <Action>(IntroduceParameter)
nmap <leader>rxf <Action>(IntroduceField)
vmap <leader>rxf <Action>(IntroduceField)
nmap <leader>rxi <Action>(ExtractInterface)
nmap <leader>rxs <Action>(ExtractSuperclass)

" nmap <C-Space> <Action>(EditorSelectWord)
" nmap <C-S-Space> <Action>(EditorUnSelectWord)

" Comment
nmap <leader>/ <Action>(CommentByLineComment)
vmap <leader>/ <Action>(CommentByLineComment)

" Navigation
nmap ]b gt
nmap [b gT
nmap H gT
nmap L gt
nmap gh ^
nmap gl $


nmap ]d <Action>(GotoNextError)
nmap [d <Action>(GotoPreviousError)

nmap ]f <Action>(MethodDown)
nmap [f <Action>(MethodUp)

nmap ]h <Action>(VcsShowNextChangeMarker)
nmap [h <Action>(VcsShowPrevChangeMarker)

" Find
nmap <leader>ff <Action>(GotoFile)
nmap <leader>fc <Action>(GotoClass)
nmap <leader>fs <Action>(GotoSymbol)
nmap <leader>fb <Action>(RecentFiles)
nmap <leader>fp <Action>(OpenProjectWindows)

" Git
nmap <leader>ghr <Action>(Vcs.RollbackChangedLines)
nmap <leader>ghR <Action>(ChangesView.Revert)
nmap <leader>gb <Action>(Annotate)
nmap <leader>gg <Action>(CheckinProject)

" Explorer
nmap <leader>e <Action>(ActivateProjectToolWindow)

" Test
nmap <leader>ts <Action>(GotoTest)
nmap <leader>tt <Action>(RunClass)
nmap <leader>tg <Action>(Generate)
nmap <leader>tr <Action>(Run)
nmap <leader>ta <Action>(ChooseDebugConfiguration)
nmap <leader>tu <Action>(ActivateRunToolWindow)

" Goto
nmap gd <Action>(GotoDeclaration)
nmap gr <Action>(GotoDeclaration)
nmap gI <Action>(GotoImplementation)

" Search
nmap <leader>sg <Action>(TextSearchAction)
nmap <leader>sf <Action>(FindInPath)
nmap <leader>s/ <Action>(Find)
nmap <leader>sa <Action>(GotoAction)
nmap <leader>se <Action>(SearchEverywhere)

" UI
nmap <leader>uC <Action>(ChangeLaf)
nmap <leader>uH <Action>(HideAllWindows)

" Terminal
nmap <C-/> <Action>(ActivateTerminalToolWindow)

" Debug
nmap <leader>dl <Action>(Debug)
nmap <leader>da <Action>(ChooseDebugConfiguration)
nmap <leader>db <Action>(ToggleLineBreakpoint)
nmap <leader>dB <Action>(EditBreakpoint)
nmap <leader>du <Action>(ActivateDebugToolWindow)
nmap <leader>di <Action>(StepInto)
nmap <leader>do <Action>(StepOut)
nmap <leader>dO <Action>(StepOver)
nmap <leader>dt <Action>(Stop)
nmap <leader>dc <Action>(Resume)
nmap <leader>de <Action>(EvaluateExpression)

" Tabs / Projects
nmap <leader><tab>] <Action>(NextProjectWindow)
nmap <leader><tab>[ <Action>(PreviousProjectWindow)

" Buffers
nmap <leader>bd <Action>(CloseContent)
nmap <leader>bw <Action>(CloseAllUnmodifiedEditors)
nmap <leader>bo <Action>(CloseAllEditorsButActive)
nmap <leader>bp <Action>(PinActiveTab)
nmap <leader>`  <Action>(Switcher)
nmap <leader>bb <Action>(Switcher)

" Paste
nmap <leader>p <Action>(PasteMultiple)
